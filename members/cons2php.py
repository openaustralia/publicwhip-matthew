#! /usr/bin/python2.3

# Converts constituency XML file into a PHP array for canonicalising
# constituency names.

import xml.sax

class ConsConvert(xml.sax.handler.ContentHandler):
    id = ""
    canonical = ""
    idtext = ""

    def startElement(self, name, attr):
        if name == "constituency":
            self.id = attr["id"]

        elif name == "name":
            if self.canonical == "":
                self.canonical = attr["text"]
                self.idtext = self.idtext + '"' + self.id + '" => "' + self.canonical + '",\n'
            print '"' + attr["text"].encode("latin-1").lower() + '" => ',

    def endElement(self, name):
        if name == "name":
            # print '"' + self.canonical.encode("latin-1") + '", '
            print '"' + self.id + '", '

        elif name == "constituency":
            self.id = ""
            self.canonical = ""


# Construct the global singleton of class which people will actually use
cc = ConsConvert()

print """<?php

# This file generated by cons2php.py from constituencies.xml.
# Edit the original (not this file), and rerun the script.
# You can find cons2php.py in Public Whip CVS repository.

# $consmatch - maps lowercased variants of constituency
# names to there unique identifier.

# $consnames - maps unique identifiers to the canonical
# form of the constituency name.

$consmatch = array("""

parser = xml.sax.make_parser()
parser.setContentHandler(cc)
parser.parse("constituencies.xml")

print """);

$consnames = array("""

print cc.idtext.encode("latin-1")
print """);

?>""";




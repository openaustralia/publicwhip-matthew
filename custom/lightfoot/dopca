#!/usr/bin/perl -w
#
# dopca:
#
# Copyright (c) 2004 Chris Lightfoot. All rights reserved.
# Email: chris@ex-parrot.com; WWW: http://www.ex-parrot.com/~chris/
#

my $rcsid = ''; $rcsid .= '$Id: dopca,v 1.2 2004/02/06 16:14:25 frabcus Exp $';

use strict;

#use Math::MatrixReal;

use lib "./";
use Eigs;

my %divnames = ( );
open(DIVNAMES, "divnames.txt") or die;
<DIVNAMES>;
while (defined($_ = <DIVNAMES>)) {
    chomp;
    my ($k, $v) = split(/#/);
    $divnames{$k} = $v;
}

my $threshold = 500;

# Four lines of noise.
<STDIN>;
<STDIN>;
<STDIN>;
<STDIN>;

# One line of MP names.
my $mps = <STDIN>;
chomp($mps);
my @mpnames = split(/,\s*/, $mps); # these names have ID numbers in front of them
shift(@mpnames);

my @divisions = ( );    # names of divisions
my @votes = ( );        # values of votes
my @sx = ( );

# record number of times each MP voted
my @numvotes = ( );
for (my $i = 0; $i < @mpnames; ++$i) {
    $numvotes[$i] = 0;
}

my $n = 0;
while (defined(my $line = <STDIN>)) {
    chomp($line);

    # abstains are zero for this analysis
    $line =~ s/--/0/g; 

    my @vv = split(/,\s*/, $line);

    last if (@vv < @mpnames);
    
    my $d = shift(@vv);

    # count the number of votes in the division.
    my $voters = 0;
    my $s = 0;
    foreach my $r (@vv) {
        $s += $r;
        ++$voters if ($r != 0);
    }
#    print "$voters\n";

    next if ($voters < $threshold);

    for (my $i = 0; $i < @mpnames; ++$i) {
        ++$numvotes[$i] if ($vv[$i]);
    }

    push(@divisions, $d);
    push(@votes, [(@vv)]);
    push(@sx, $s);
    printf STDERR "%d   \r", ++$n;
}
print STDERR "\n";

printf STDERR "%d divisions with >= %d voters\n", scalar(@divisions), $threshold;

# normalise voting record.
for (my $i = 0; $i < @mpnames; ++$i) {
    $numvotes[$i] /= @divisions;
}

my $cov = []; #new Math::MatrixReal(scalar(@divisions), scalar(@divisions));

# Now need to compute variance-covariance matrix for these divisions.
for (my $d1 = @divisions - 1; $d1 >= 0; --$d1) {
    printf STDERR "%d  \r", $d1;
    for (my $d2 = 0; $d2 <= $d1; ++$d2) {
        my $sxy = 0;
        for (my $i = 0; $i < @mpnames; ++$i) {
            $sxy +=  $votes[$d1]->[$i] * $votes[$d2]->[$i];
        }

        my $c = ($sxy - $sx[$d1] * $sx[$d2] / @mpnames) / @mpnames;

        $cov->[$d1]->[$d2] = $cov->[$d2]->[$d1] = $c;
    }
}

print STDERR "\n";

my $L = sqrt(@divisions - 1.);

if ($ARGV[0]) {
    my $vals = Eigs::compute_eigs(0, $cov);
    print join("\n", map { abs($_) } sort { abs($b) <=> abs($a) } @{$vals}), "\n";
} else {
    my $E = Eigs::compute_eigs(1, $cov);

    # compute x, y coordinates for the various MPs.
    my (@x, @y);
    for (my $i = 0; $i < @mpnames; ++$i) {
        my ($x, $y) = (0, 0);
        for (my $j = 0; $j < @divisions; ++$j) {
            $x += $E->[0]->[1]->[$j] * $votes[$j]->[$i];
            $y += $E->[1]->[1]->[$j] * $votes[$j]->[$i];
        }
        push(@x, $x / $L);
        push(@y, $y / $L);
#        printf "%f %f %f # %s\n", $x / $L, $y / $L, $numvotes[$i], $mpnames[$i];
    }

    # print out report for the java applet to read.
    my $NMPs = 0;
    foreach (@numvotes) {
        ++$NMPs if ($_ > 0);
    }

    print "$NMPs 1 1 1\n";
    my $a = 1;
    for (my $i = 0; $i < @mpnames; ++$i) {
        next if ($numvotes[$i] == 0);
        my ($name, $party) = ($mpnames[$i] =~ /^([^(]+?) +\(([^)]+)\)/);
        printf "%d %f %f 0.0 \"%s\" \"%s\"\n", $a++, $x[$i] / $numvotes[$i], $y[$i] / $numvotes[$i], $name, $party;
    }
    
### 
###     print "# eigenvectors report\n";
###     print "# x:\n";
### 
###     my @c = sort { abs($E->[0]->[1]->[$b]) <=> abs($E->[0]->[1]->[$a]) } (0 .. $#divisions);
###     foreach (@c) {
###         printf "# %f # %s: %s\n", $E->[0]->[1]->[$_], $divisions[$_], $divnames{$divisions[$_]};
###     }
### 
###     print "#\n";
###     print "# y:\n";
### 
###     @c = sort { abs($E->[1]->[1]->[$b]) <=> abs($E->[1]->[1]->[$a]) } (0 .. $#divisions);
###     foreach (@c) {
###         printf "# %f # %s: %s\n", $E->[1]->[1]->[$_], $divisions[$_], $divnames{$divisions[$_]};
###     }
###     
}


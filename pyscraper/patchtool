#!/bin/bash
set -e # exit upon error
# set -x # show commands as run for debugging

EDITOR=vim

function bad_params()
{
    cat <<END

This generates files for the patchfilter.py filter.

They are standard patch files which apply to the glued HTML files which we
download from Hansard.  Any special errors in Hansard are fixed by
these patches.  

Run this tool like this:
  ./patchtool wrans 2004-03-25
This will launch your editor, and upon exit write out a patch of your changes
in the patches folder underneath this folder.  The original file is
untouched.  We consider the patches permanent data so they are added to CVS.

END
    exit 1
}

[ "$1" = "" ] && bad_params
[ "$2" = "" ] && bad_params

FOLDER=$1
STUB=$1
[ "$1" = "wrans" ] && STUB=answers
DATE=$2
shift 2

# Folders to put the patches into
mkdir -p patches/debates
mkdir -p patches/wrans
PATCHDEST=`pwd`
PATCHFILE=patches/$FOLDER/$STUB$DATE.html.patch

# Where HTML files we're patching are
ORIGFILE=$FOLDER/$STUB$DATE.html
TEMPFILE=$FOLDER/$STUB$DATE-patchtmp.html
cd ~/pwdata/cmpages

# Make copy of original, and launch editor
rm -f $TEMPFILE
cp $ORIGFILE $TEMPFILE
[ -e $PATCHDEST/$PATCHFILE ] && patch --quiet $TEMPFILE <$PATCHDEST/$PATCHFILE
$EDITOR $TEMPFILE $@

# Create patchfile from changes, or delete patchfile if none
set +e
diff -u $ORIGFILE $TEMPFILE > $PATCHDEST/$PATCHFILE.new
if [ $? == 2 ]; then
    echo "Error running diff"
    exit 1
fi
set -e
rm -f $TEMPFILE
cd $PATCHDEST
if [ -s $PATCHFILE.new ]
then
    echo Written patch file $PATCHFILE
    if [ -e $PATCHFILE ]
    then
        mv $PATCHFILE.new $PATCHFILE
    else
        mv $PATCHFILE.new $PATCHFILE
        cvs add $PATCHFILE
    fi
else
    rm -f $PATCHFILE.new
    echo No changes from original, deleted patch $PATCHFILE
    if [ -e $PATCHFILE ]
    then
        rm -f $PATCHFILE
        cvs remove $PATCHFILE
    fi
fi


